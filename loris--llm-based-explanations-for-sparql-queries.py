import streamlit as st
from streamlit.components.v1 import html
from code_editor import code_editor
import extra_streamlit_components as stx

from PIL import Image
import base64
import logging
from decouple import config
import os
import signal

from util import include_css, replace_values_in_index_html



PAGE_ICON = config('PAGE_ICON')
PAGE_IMAGE = config('PAGE_IMAGE')
GITHUB_REPO = config('GITHUB_REPO')
DESCRIPTION = config('DESCRIPTION').replace("\\n", "\n") % (
    GITHUB_REPO, GITHUB_REPO + "/issues/new", GITHUB_REPO + "/issues/new")
META_DESCRIPTION = config('META_DESCRIPTION', default=None)

REPLACE_INDEX_HTML_CONTENT = config(
    'REPLACE_INDEX_HTML_CONTENT', default=False, cast=bool)
CANONICAL_URL = config('CANONICAL_URL', default=None)
ADDITIONAL_HTML_HEAD_CONTENT = config(
    'ADDITIONAL_HTML_HEAD_CONTENT', default=None)
WRAP = True

PAGE_TITLE = "LoriS -- LLM-based explanations for SPARQL queries"

explanation_models = ["GPT-3", "GPT-4", "Mistral"]

example_code = """SELECT * 
WHERE { 
    ?s ?p ?o . 
}
"""

agree_on_showing_additional_information = True

logging.basicConfig()
logging.getLogger().setLevel(logging.INFO)

replace_values_in_index_html(st, REPLACE_INDEX_HTML_CONTENT,
                             new_title=PAGE_TITLE,
                             new_meta_description=META_DESCRIPTION,
                             new_noscript_content=DESCRIPTION,
                             canonical_url=CANONICAL_URL,
                             page_icon_with_path=PAGE_ICON,
                             additional_html_head_content=ADDITIONAL_HTML_HEAD_CONTENT
                             )

st.set_page_config(layout="wide", initial_sidebar_state="expanded",
                   page_title=PAGE_TITLE,
                   page_icon=Image.open(PAGE_ICON)
                   )
include_css(st, ["css/style_github_ribbon.css", "css/style_menu_logo.css", "css/style_logo.css", "css/style_tabs.css"])

# if the dry run is enabled, we will stop the script
if config('DRY_RUN', default=False, cast=bool):
    logging.info("dry run enabled, will stop script, now")
    os.kill(os.getpid(), signal.SIGTERM)

@st.cache_data
def get_explanation(sparql_query, model_name):
    # TODO: call the explanation generation service
    logging.info(f"Generating explanation for '{sparql_query}' using {model_name}")
    
    explanations = {
            "subtitle": "Explanation generated by " + model_name,
            "explanation": "TODO " + model_name
    }
    
    return explanations
    

def update_width_slider():
    st.session_state.width_slider = st.session_state.width_input


def update_width_input():
    st.session_state.width_input = st.session_state.width_slider


with st.sidebar:
    with open(PAGE_IMAGE, "rb") as f:
        image_data = base64.b64encode(f.read()).decode("utf-8")
        st.sidebar.markdown(
            f"""
            <div style="display:table;margin-top:-10%;margin-bottom:15%;text-align:center">
                <a href="{GITHUB_REPO}" title="go to GitHub repository"><img src="data:image/png;base64,{image_data}" class="app_logo"></a>
            </div>
            """,
            unsafe_allow_html=True,
        )
        
    default_model = st.selectbox("Select a model to generate the explanation", explanation_models, index=0)

    theme = st.selectbox("Select a theme for the code editor", ["default", "light", "dark", "contrast"], index=0)
    shortcuts = st.selectbox("shortcuts:", ["vscode", "emacs", "vim", "sublime"], index=0)

    help = "Activate to focus on the editor. It will remove some white space and text from the UI."
    agree_on_showing_additional_information = not st.checkbox(
        'minimize layout', value=(not agree_on_showing_additional_information), help=help)


buttons = [{
    "name": "copy",
    "feather": "Copy",
    "hasText": True,
    "alwaysOn": True,
    "commands": ["copyAll"],
    "style": {"top": "0rem", "right": "0.4rem"}
},{
    "name": "explain me",
    "feather": "Play",
    "primary": True,
    "hasText": True,
    "alwaysOn": True,
    "showWithIcon": True,
    "commands": ["submit"],
    "style": {"bottom": "0.44rem", "right": "0.4rem", "color": "white", "border-color": "#f63366", "border-width": "thin", "border-radius": "0.5rem", "border-style": "solid"}
}]

# introduce the tool
page_header = """## LoriS &#8212; LLM-based explanations for SPARQL queries

{}                    
""".format(DESCRIPTION)

# show the page header only if the user is not minimizing the layout
if agree_on_showing_additional_information:
    with st.container():
        st.markdown(page_header, unsafe_allow_html=True)
else:
    include_css(st, ["css/remove_space_around_streamlit_body.css"])

st.subheader("Enter a SPARQL query")
response_dict = code_editor(example_code, height=20, lang="sparql", theme=theme, shortcuts=shortcuts, options={"wrap": WRAP}, buttons=buttons)

logging.info(response_dict)

sparql_query = response_dict["text"]

tab_data = []
for i, model in enumerate(explanation_models):
    tab_data.append(
        stx.TabBarItemData(
            id=model,
            title=model,
            description="TODO"
        )
    )

st.subheader("Explanation for the given SPARQL query")
if response_dict["type"] == "submit":
    chosen_id = stx.tab_bar(data=tab_data, key="tab_bar", default=default_model)
    logging.info("chosen_id: " + chosen_id)
    if chosen_id == None or chosen_id == "None":
        st.warning("Please select a model to generate the explanation.")
    else:
        try:
            explanation = get_explanation(sparql_query, chosen_id)
            st.markdown("#### " + explanation["subtitle"])
            st.write(explanation["explanation"])
        except Exception as e:
            st.error(f"An error occurred: {e}")
else:
    st.warning("Please click on the 'explain me' button to generate the explanation.")

st.markdown("""
---
Brought to you by the [<img style="height:3ex;border:0" src="https://avatars.githubusercontent.com/u/120292474?s=96&v=4"> WSE research group](https://wse-research.org/?utm_source=image-to-ascii-art&utm_medium=footer) at the [Leipzig University of Applied Sciences](https://www.htwk-leipzig.de/).

See our [GitHub team page](http://wse.technology/) for more projects and tools.
""", unsafe_allow_html=True)

with open("js/change_menu.js", "r") as f:
    javascript = f.read()
    html(f"<script style='display:none'>{javascript}</script>")

html("""
<script>
parent.window.document.querySelectorAll("section[data-testid='stFileUploadDropzone']").forEach(function(element) {
    element.classList.add("fileDropHover")   
});

github_ribbon = parent.window.document.createElement("div");            
github_ribbon.innerHTML = '<a id="github-fork-ribbon" class="github-fork-ribbon right-bottom" href="%s" target="_blank" data-ribbon="Fork me on GitHub" title="Fork me on GitHub">Fork me on GitHub</a>';
if (parent.window.document.getElementById("github-fork-ribbon") == null) {
    parent.window.document.body.appendChild(github_ribbon.firstChild);
}
</script>
""" % (GITHUB_REPO,))
